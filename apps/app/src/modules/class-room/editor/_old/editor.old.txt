import { useState, useEffect } from 'react';

export default function CodePenEditor() {
  const [htmlCode, setHtmlCode] = useState(`<div class="container">
  <h1>Hello CodePen!</h1>
  <p>Edit the code to see changes live.</p>
  <button id="myButton">Click me!</button>
</div>`);

  const [cssCode, setCssCode] = useState(`.container {
  max-width: 600px;
  margin: 50px auto;
  padding: 20px;
  font-family: 'Arial', sans-serif;
  text-align: center;
}

h1 {
  color: #2ecc71;
  font-size: 2.5rem;
  margin-bottom: 20px;
}

p {
  color: #666;
  font-size: 1.2rem;
  margin-bottom: 30px;
}

button {
  background: linear-gradient(45deg, #3498db, #2ecc71);
  color: white;
  border: none;
  padding: 12px 24px;
  font-size: 1rem;
  border-radius: 25px;
  cursor: pointer;
  transition: transform 0.3s ease;
}

button:hover {
  transform: scale(1.05);
}`);

  const [jsCode, setJsCode] = useState(`document.addEventListener('DOMContentLoaded', function() {
  const button = document.getElementById('myButton');

  button.addEventListener('click', function() {
    alert('Hello from CodePen replica!');
    button.style.background = 'linear-gradient(45deg, #e74c3c, #f39c12)';
  });
});`);

  const [activeTab, setActiveTab] = useState('html');
  const [previewContent, setPreviewContent] = useState('');
  const [errors, setErrors] = useState({ html: [], css: [], js: [] });
  const [consoleMessages, setConsoleMessages] = useState(['Ready to run your code...']);

  // Error validation functions
  const validateHTML = (html) => {
    const errors = [];

    // Check for unclosed tags
    const openTags = html.match(/<[^/][^>]*>/g) || [];
    const closeTags = html.match(/<\/[^>]*>/g) || [];

    const openTagNames = openTags.map(tag => {
      const match = tag.match(/<(\w+)/);
      return match ? match[1].toLowerCase() : null;
    }).filter(Boolean);

    const closeTagNames = closeTags.map(tag => {
      const match = tag.match(/<\/(\w+)/);
      return match ? match[1].toLowerCase() : null;
    }).filter(Boolean);

    // Self-closing tags that don't need closing tags
    const selfClosing = ['img', 'br', 'hr', 'input', 'meta', 'link'];
    const filteredOpenTags = openTagNames.filter(tag => !selfClosing.includes(tag));

    if (filteredOpenTags.length !== closeTagNames.length) {
      errors.push('Mismatched opening and closing tags detected');
    }

    // Check for basic syntax issues
    if (html.includes('<>') || html.includes('</>')) {
      errors.push('Empty tag detected');
    }

    return errors;
  };

  const validateCSS = (css) => {
    const errors = [];

    // Check for unclosed braces
    const openBraces = (css.match(/{/g) || []).length;
    const closeBraces = (css.match(/}/g) || []).length;

    if (openBraces !== closeBraces) {
      errors.push('Mismatched curly braces in CSS');
    }

    // Check for missing semicolons and other CSS issues
    const lines = css.split('\n');
    let insideComment = false;
    let insideRule = false;

    lines.forEach((line, index) => {
      const trimmedLine = line.trim();

      // Handle multi-line comments
      if (trimmedLine.includes('/*')) insideComment = true;
      if (trimmedLine.includes('*/')) insideComment = false;
      if (insideComment) return;

      // Skip empty lines and single-line comments
      if (!trimmedLine || trimmedLine.startsWith('//')) return;

      // Track if we're inside a CSS rule
      if (trimmedLine.includes('{')) insideRule = true;
      if (trimmedLine.includes('}')) insideRule = false;

      // Check for missing semicolons on property lines
      if (insideRule &&
          trimmedLine.includes(':') &&
          !trimmedLine.endsWith(';') &&
          !trimmedLine.endsWith('{') &&
          !trimmedLine.endsWith('}')) {
        errors.push(`Line ${index + 1}: Missing semicolon`);
      }

      // Check for invalid property syntax
      if (insideRule && trimmedLine.includes(':')) {
        const parts = trimmedLine.split(':');
        if (parts.length < 2) {
          errors.push(`Line ${index + 1}: Invalid property syntax`);
        } else {
          const property = parts[0].trim();
          const value = parts[1].trim().replace(';', '');

          // Check for empty values
          if (!value) {
            errors.push(`Line ${index + 1}: Empty property value for '${property}'`);
          }

          // Check for common property name typos
          const commonProperties = [
            'align-items', 'align-self', 'animation', 'background', 'background-color', 'background-image',
            'border', 'border-radius', 'border-color', 'border-width', 'bottom', 'box-shadow', 'color',
            'cursor', 'display', 'flex', 'flex-direction', 'flex-wrap', 'font-family', 'font-size', 'font-weight',
            'height', 'justify-content', 'left', 'line-height', 'margin', 'margin-top', 'margin-bottom',
            'margin-left', 'margin-right', 'max-width', 'min-width', 'opacity', 'overflow', 'padding',
            'padding-top', 'padding-bottom', 'padding-left', 'padding-right', 'position', 'right',
            'text-align', 'text-decoration', 'top', 'transform', 'transition', 'visibility', 'width', 'z-index'
          ];

          // Calculate edit distance (Levenshtein distance)
          const editDistance = (str1, str2) => {
            const matrix = [];
            for (let i = 0; i <= str2.length; i++) {
              matrix[i] = [i];
            }
            for (let j = 0; j <= str1.length; j++) {
              matrix[0][j] = j;
            }
            for (let i = 1; i <= str2.length; i++) {
              for (let j = 1; j <= str1.length; j++) {
                if (str2.charAt(i - 1) === str1.charAt(j - 1)) {
                  matrix[i][j] = matrix[i - 1][j - 1];
                } else {
                  matrix[i][j] = Math.min(
                    matrix[i - 1][j - 1] + 1, // substitution
                    matrix[i][j - 1] + 1,     // insertion
                    matrix[i - 1][j] + 1      // deletion
                  );
                }
              }
            }
            return matrix[str2.length][str1.length];
          };

          // Only suggest if the property is not in the list and seems like a typo
          if (!commonProperties.includes(property.toLowerCase()) && property.length > 2 && !property.startsWith('-')) {
            const suggestions = commonProperties.filter(prop => {
              const distance = editDistance(property.toLowerCase(), prop);
              // Allow up to 2 character differences for reasonable suggestions
              return distance <= 2 && distance > 0;
            }).sort((a, b) => {
              // Sort by edit distance (closest matches first)
              return editDistance(property.toLowerCase(), a) - editDistance(property.toLowerCase(), b);
            });

            if (suggestions.length > 0) {
              errors.push(`Line ${index + 1}: Did you mean '${suggestions[0]}' instead of '${property}'?`);
            } else if (property.length > 4) {
              // If no close matches found, just indicate it's an unknown property
              errors.push(`Line ${index + 1}: Unknown CSS property '${property}'`);
            }
          }
        }
      }

      // Check for unclosed quotes
      const singleQuotes = (trimmedLine.match(/'/g) || []).length;
      const doubleQuotes = (trimmedLine.match(/"/g) || []).length;

      if (singleQuotes % 2 !== 0) {
        errors.push(`Line ${index + 1}: Unclosed single quote`);
      }
      if (doubleQuotes % 2 !== 0) {
        errors.push(`Line ${index + 1}: Unclosed double quote`);
      }

      // Check for missing colons in property declarations
      if (insideRule &&
          !trimmedLine.includes(':') &&
          !trimmedLine.includes('{') &&
          !trimmedLine.includes('}') &&
          trimmedLine.length > 0) {
        errors.push(`Line ${index + 1}: Missing colon in property declaration`);
      }
    });

    // Check for common CSS syntax errors
    if (css.includes(';;')) {
      errors.push('Double semicolons found');
    }

    if (css.includes('::')) {
      const doubleColons = css.match(/::[^:]/g);
      if (doubleColons && doubleColons.length > css.match(/::(before|after|first-line|first-letter)/g)?.length) {
        errors.push('Invalid double colon usage (use single colon for pseudo-classes)');
      }
    }

    return errors;
  };

  const validateJS = (js) => {
    const errors = [];

    try {
      // Basic syntax check using Function constructor
      new Function(js);
    } catch (error) {
      errors.push(`Syntax Error: ${error.message}`);
    }

    // Check for common issues
    if (js.includes('console.log')) {
      // This is just to show console messages exist, not an error
    }

    return errors;
  };

  // Validate code on changes
  useEffect(() => {
    const newErrors = {
      html: validateHTML(htmlCode),
      css: validateCSS(cssCode),
      js: validateJS(jsCode)
    };
    setErrors(newErrors);
  }, [htmlCode, cssCode, jsCode]);

  useEffect(() => {
    const generatePreview = () => {
      // Capture console messages
      const jsWithConsoleCapture = `
        (function() {
          const originalLog = console.log;
          const originalError = console.error;
          const messages = [];

          console.log = function(...args) {
            messages.push({ type: 'log', content: args.join(' ') });
            originalLog.apply(console, args);
          };

          console.error = function(...args) {
            messages.push({ type: 'error', content: args.join(' ') });
            originalError.apply(console, args);
          };

          window.addEventListener('error', function(e) {
            messages.push({ type: 'error', content: e.message + ' (Line: ' + e.lineno + ')' });
          });

          try {
            ${jsCode}
          } catch (error) {
            messages.push({ type: 'error', content: error.message });
          }

          // Send messages to parent
          setTimeout(() => {
            if (messages.length > 0) {
              window.parent.postMessage({ type: 'console', messages }, '*');
            }
          }, 100);
        })();
      `;

      return `
        <!DOCTYPE html>
        <html>
          <head>
            <style>${cssCode}</style>
          </head>
          <body>
            ${htmlCode}
            <script>${jsWithConsoleCapture}</script>
          </body>
        </html>
      `;
    };

    setPreviewContent(generatePreview());
  }, [htmlCode, cssCode, jsCode]);

  // Listen for console messages from iframe
  useEffect(() => {
    const handleMessage = (event) => {
      if (event.data?.type === 'console') {
        setConsoleMessages(prev => [
          'Code executed...',
          ...event.data.messages.map(msg =>
            `${msg.type === 'error' ? '❌' : 'ℹ️'} ${msg.content}`
          )
        ]);
      }
    };

    window.addEventListener('message', handleMessage);
    return () => window.removeEventListener('message', handleMessage);
  }, []);

  const tabs = [
    { id: 'html', label: 'HTML', color: 'text-orange-500' },
    { id: 'css', label: 'CSS', color: 'text-blue-500' },
    { id: 'js', label: 'JS', color: 'text-yellow-500' }
  ];

  const getCurrentCode = () => {
    switch (activeTab) {
      case 'html': return htmlCode;
      case 'css': return cssCode;
      case 'js': return jsCode;
      default: return '';
    }
  };

  const setCurrentCode = (code) => {
    switch (activeTab) {
      case 'html': setHtmlCode(code); break;
      case 'css': setCssCode(code); break;
      case 'js': setJsCode(code); break;
    }
  };

  const getCurrentErrors = () => {
    return errors[activeTab] || [];
  };

  const hasErrors = (tabId) => {
    return errors[tabId] && errors[tabId].length > 0;
  };

  return (
    <div className="h-screen bg-gray-900 flex flex-col">
      {/* Header */}
      <div className="bg-gray-800 border-b border-gray-700 p-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <div className="text-2xl font-bold text-white">
              <span className="text-green-400">Code</span>Pen
            </div>
            <div className="text-gray-400 text-sm">Replica</div>
          </div>
          <div className="flex space-x-2">
            <button className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded text-sm transition-colors">
              Save
            </button>
            <button className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded text-sm transition-colors">
              Fork
            </button>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 flex">
        {/* Code Editor Section */}
        <div className="w-1/2 flex flex-col border-r border-gray-700">
          {/* Tab Navigation */}
          <div className="bg-gray-800 flex border-b border-gray-700">
            {tabs.map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`px-6 py-3 text-sm font-medium transition-colors border-b-2 relative ${
                  activeTab === tab.id
                    ? `${tab.color} border-current bg-gray-700`
                    : 'text-gray-400 border-transparent hover:text-gray-200 hover:bg-gray-750'
                }`}
              >
                {tab.label}
                {hasErrors(tab.id) && (
                  <span className="absolute -top-1 -right-1 w-2 h-2 bg-red-500 rounded-full"></span>
                )}
              </button>
            ))}
          </div>

          {/* Code Editor */}
          <div className="flex-1 relative flex">
            {/* Line Numbers */}
            <div className="bg-gray-800 text-gray-500 text-sm font-mono py-4 px-2 border-r border-gray-700 select-none">
              {getCurrentCode().split('\n').map((_, index) => (
                <div key={index} className="text-right leading-5 h-5">
                  {index + 1}
                </div>
              ))}
            </div>

            {/* Code Textarea */}
            <textarea
              value={getCurrentCode()}
              onChange={(e) => setCurrentCode(e.target.value)}
              className={`flex-1 bg-gray-900 text-gray-100 p-4 font-mono text-sm resize-none outline-none leading-5 ${
                getCurrentErrors().length > 0 ? 'border-l-4 border-red-500' : ''
              }`}
              style={{
                fontFamily: 'Consolas, Monaco, "Courier New", monospace',
                lineHeight: '20px'
              }}
              spellCheck="false"
            />

            <div className="absolute top-2 right-2 text-xs text-gray-500 bg-gray-800 px-2 py-1 rounded">
              {activeTab.toUpperCase()}
            </div>

            {/* Error indicators */}
            {getCurrentErrors().length > 0 && (
              <div className="absolute bottom-2 left-2 right-2">
                <div className="bg-red-900 border border-red-700 rounded p-2 text-red-200 text-xs max-h-20 overflow-y-auto">
                  {getCurrentErrors().map((error, index) => (
                    <div key={index} className="flex items-center space-x-2 mb-1 last:mb-0">
                      <span className="text-red-400">⚠</span>
                      <span>{error}</span>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Preview Section */}
        <div className="w-1/2 flex flex-col">
          {/* Preview Header */}
          <div className="bg-gray-800 border-b border-gray-700 px-4 py-3">
            <div className="flex items-center justify-between">
              <h3 className="text-white font-medium">Preview</h3>
              <div className="flex space-x-2">
                <button className="text-gray-400 hover:text-white text-sm">
                  <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clipRule="evenodd" />
                  </svg>
                </button>
                <button className="text-gray-400 hover:text-white text-sm">
                  <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M3 4a1 1 0 011-1h4a1 1 0 010 2H6.414l2.293 2.293a1 1 0 11-1.414 1.414L5 6.414V8a1 1 0 01-2 0V4zm9 1a1 1 0 010-2h4a1 1 0 011 1v4a1 1 0 01-2 0V6.414l-2.293 2.293a1 1 0 11-1.414-1.414L13.586 5H12zm-9 7a1 1 0 012 0v1.586l2.293-2.293a1 1 0 111.414 1.414L6.414 15H8a1 1 0 010 2H4a1 1 0 01-1-1v-4zm13-1a1 1 0 011 1v4a1 1 0 01-1 1h-4a1 1 0 010-2h1.586l-2.293-2.293a1 1 0 111.414-1.414L15 13.586V12a1 1 0 011-1z" clipRule="evenodd" />
                  </svg>
                </button>
              </div>
            </div>
          </div>

          {/* Preview Frame */}
          <div className="flex-1 bg-white">
            <iframe
              srcDoc={previewContent}
              className="w-full h-full border-none"
              sandbox="allow-scripts allow-same-origin"
              title="Preview"
            />
          </div>
        </div>
      </div>

      {/* Console/Output Panel */}
      <div className="h-32 bg-gray-800 border-t border-gray-700 p-4 flex flex-col">
        <div className="flex items-center justify-between mb-2">
          <div className="text-gray-400 text-xs">Console</div>
          <button
            onClick={() => setConsoleMessages(['Ready to run your code...'])}
            className="text-gray-400 hover:text-white text-xs px-2 py-1 rounded bg-gray-700 hover:bg-gray-600"
          >
            Clear
          </button>
        </div>
        <div className="flex-1 overflow-y-auto text-sm font-mono">
          {consoleMessages.map((message, index) => (
            <div
              key={index}
              className={`mb-1 ${
                message.includes('❌') ? 'text-red-400' :
                message.includes('ℹ️') ? 'text-blue-400' :
                'text-green-400'
              }`}
            >
              {message}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}
